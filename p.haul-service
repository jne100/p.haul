#!/usr/bin/env python

import sys
import signal
import argparse
import logging
import phaul.xem_rpc
import phaul.service
import phaul.connection


def log_uncaught_exception(type, value, traceback):
	logging.error(value, exc_info=(type, value, traceback))


def fin(foo, bar):
	global stop_fd
	logging.info("Stop by %d", foo)
	stop_fd.close()


parser = argparse.ArgumentParser("Process HAULer service server")
parser.add_argument("--fdrpc", help="File descriptor of rpc socket", type=int, required=True)
parser.add_argument("--fdmem", help="File descriptor of memory socket", type=int, required=True)
parser.add_argument("--fdfs", help="File descriptor of fs socket", type=int, required=True)
parser.add_argument("--log-file", help="Write logging messages to specified file")

args = parser.parse_args()

# Configure logging
logging.basicConfig(filename=args.log_file, filemode="w", level=logging.INFO,
	format="%(asctime)s.%(msecs)03d: %(message)s", datefmt="%H:%M:%S")

# Setup hook to log uncaught exceptions
sys.excepthook = log_uncaught_exception

logging.info("Starting p.haul service")

# Establish connection
connection = phaul.connection.establish(args.fdrpc, args.fdmem, args.fdfs)

t = phaul.xem_rpc.rpc_threaded_srv(phaul.service.phaul_service, connection)

# FIXME: Setup stop handlers
stop_fd = t.init_stop_fd()
signal.signal(signal.SIGTERM, fin)
signal.signal(signal.SIGINT, fin)

t.start()
signal.pause()
t.join()
logging.info("Bye!")

# Close connection
connection.close()
